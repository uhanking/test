Servlet
-----------
서버에서 실행하는 프로그램
1.준비 사항
(1) 웹서버 준비
	jetty, tomcat, apache, iis, webLogic, Jeus, webSphere,...
	1)www.apache.org

2. 웹 어플리케이션 준비
	1)폴더 생성(어플리케이션)
		-testapp의 폴더 생성
	2) 메인 페이지 생성
		-index.html
	3) 기본 구조
		프로젝트 폴더(testapp)
			WEB-INF 폴더
				classes 폴더
				lib 폴더
				web.xml

webapps - 웹어플리케이션을 만들어 두는곳 그럼 톰캣이 접근하여 실행
주소 앞에 /로 시작하면 절대경로
폴더명으로 시작하면 상대경로 또는 .이나 ..으로 시작
<!-- path="/testapp2" : path="http://localhost:8080/testapp2" -->

3. 서블릿

(1) 서블릿(servlet)이란?
//applet 어플리케이션을 웹에서 돌아가는 작은 프로그램
	- 서버에서 실행되는 java application
(2) 준비 사항
	-api document
	-라이브러리
(3) 웹 프로젝트 준비
	-ServletApp

(4) 특징
	1) 자바로 만든 프로그램
	2) 클라이언트와 소통이 가능
	3) javax.servlet.http.HttpServlet 상속 / 클래스가 있어야 소통이 가능

(5) 서블릿 소통 방식
	1) 서블릿만으로 소통
	2) 미들 페이지(html)를 통해 서블릿과 소통
----------------------------------------10.17일 정리	
(6) 서블릿을 구성하는 핵심 클래스

-HttpServlet : 해당 자바클래스를 서블릿으로 만들어주는 클래스. 해당자바클래스는 이클래스를 상속받는다

-HttpServletRequest : 클라이언트에서 서버로 요청.(클 -> 서버) 반드시 Request가 먼저 이뤄져야 한다.
	-public interface ServletRequest(부모)

-HttpServletResponse : 서버에서 클라이언트로 응답(서 - > 클)

요청과 응답의 한 사이클을 round trip이라 한다.

(7) 요청방식

1) GET 방식
- 하이퍼링크 전송 방식, URL 전송 방식
- 전송 방법이 다양하다.
- 소량의 데이터만 전송 가능(패킷의 바디가 아닌 헤더에 데이터를 담는다. 간편하게 사용할때 사용)
- 기본 요청 방식(default)
- 데이터의 정보를 조회

*form으로 묶어서 서블릿에 전달
<form method="get" action="req"> // 요청방식 = get, req에 전달

*form으로 묶지 않고 하이퍼링크로 서블릿에 전달 - ?뒤에 변수를 이용할 수 있다.
<a href="http://localhost:8080/ServletApp/req?name=miller&age=20">

* 주소창에 http://loalhost:8080/Servlet/req?name=miller&age=20을 직접입력해도 된다(URL 전송 방식) ==> GET방식

2) POST 방식
-폼 전송방식
-전송 방식이 다 한가지
-대량의 데이터를 전송 가능
-데이터가 노출되지 않는다.
-서버측의 데이터 변경

(8) 데이터 전송을 위한 주요 메서드
String getPrameter(String name)
String[] getParmeters(String name)

java.util.Enumeration<String> getParmeterNames()  변수를 가져옴
java.util.Map<String.String[]> getParmeterMap()

텍스트값은 입력하지 않아도 전송된다

servlet3.0부터는 web.xml에서 설정안해도 자바클래스에서 해줌

(9) 서블릿의 LifeCycle
	1)init()   서블릿이 호출될 때 단 한번만 호출됨
	2)service()	두번째 요청부터 반복호출이 됨 
	 오버라이딩을 원래 해야하지만, do~시작하는 메서드가 호출
	 요즘은 doGet과 doPost만 오버라이딩하여 사용해도 됨						
	3)destroy()	서블릿이 종료 될 때 단 한번만 호출

(10) Header 정보 가져오기
	-HttpServletRequest

(11) 웹 프로그래밍에서 중요한 기술 2가지
	1) 페이지 이동 기술
		-HTML 
			<a></a>
			<meta...>
		-JAVASCRIPT
			history
			location
		-JAVA
			
	2)Data Persistance(데이타 지속성 : 내가 필요할때까지 변수를 유지하는 기술(DB))
		- CooKie : 서버가 클라이언트의 보조기억 장치에 흔적을 남기는 기술
			-HttpServletRequest, HttpServletResponse
			
			-쿠키
			-메모리 쿠키 : 서버와 사용자간 연결이 되어 있는동안만 사용 할 수 있는 쿠키, 연결이 끊기면 사라짐

			-쿠키에 정보를 담을때는 암호화

		- Session : 사용자 정보를 서버에 저장
			세션의 고유id를 쿠키에 저장하여 구분
			-HttpSession
	
		
			void setAttribute(java.lang.String name, java.lang.Object value)  : 세션에 사용자의 특정 정보를 저장할 때 쓰는
			 void setMaxInactiveInterval(int interval)  : 체류 시간을 설정하여 그시간동안 사용이 안되면 세션을 삭제
			long getLastAccessedTime()  : 마지막으로 사용자가 접근한 시간
			 int getMaxInactiveInterval()  : 현재 웹서버의 만료시간을
			void invalidate()  : 강제로 세션을 만료(로그아웃)
			 boolean isNew()  : 최근 새로 접속한 사람인지 구분
			
				
		암호화 : MDS 5, SHA

		http의 한계를 보완하기위해 사용

	서버에 배포 하는 법
-----------------------------------------------
	.war 로 압축

*http : 비연결 지향적



JSP
----
1. HTML(주)안에 자바 코드를 포함시키는 형태(방법 제공)

2. 구성요소
(1) Template Data(정적 데이타)
	-html, xml등

(2) Elements(동적 데이타, 요소)

	1) Script Element
		-HTML안에 자바 코드를 끼어넣게 해줄 수 있는 문법
		<%! ... %> : 선언부(declaration)
		<% ... %> : 처리부(scriptlet)
		<%= ... %> : 표현부(expression)
		-----------------------------------
		3개가 모여서 하나의 클래스
	2) Directive
		- 현재 페이지에 지시를 내리고자 할 때 사용하는 도구
		<%@ page properties... %>
		--------------------------
		{ import=”importList”} 
		{ contentType=”ctinfo”}
		{ session=”true|false” } 
		{ errorPage=”error_url”}  에러가 났을경우 이동하는 페이지
		{ isErrorPage=”true|false” } 이페이지를 오류페이지로 할지 안할지/exception은 에러페이지에서만 사용가능
		{ isELIgnored=”true|false” }			
		{ buffer=”none|sizekb” }  출력 버퍼 : 클라이언트에게 한번에 보내기위해 저장해놓는 장소,(기본 8kb)
		{ autoFlush=”true|false”} 방출
		
		<%@ include file="..." %> 반복되는 내용을 별도의 페이지로 분리시키고 그것을 포함시키는
		<%@ taglib prperties... %> 

	3) Implicit Object
		*request	 : HttpServletRequest    (입출력객체 이면서 Context관력 객체)
		*response 	 : HttpServletResponse    ////////    void sendRedirect(java.lang.String location)  
		out 		 : javax.servlet.jsp.JspWriter
		---------------------------------------------------입출력관련 객체
		
		page		 : javax.servlet.HttpJspPage
		config		 : javax.servlet.ServletConfig
		---------------------------------------------------서블릿관련 객체/거의 사용안함

		*session	 : HttpSession
		*application	 : ServletContext
		*pageContext	 : javax.servlet.jsp.PageContext   ///전형적인 지역 변수
		-----------------------------------------------------Context(프로젝트를 만든 장소)관련 객체(데이터보관,관리)
		
		setAttribute(변수명, 값)
		getAttribute(변수명)
		removeAttribute(변수명)
		=====================================================Context관력 객체들의 공통 메서드
			
		exception	 : java.lang.Throwable
		-------------------------------------------------에러 객체
	4) Action Tag
		자바코드를 분리하여 그 코드를 다시 불러서 쓸수 있게 하는 태그
		
	5) EL

3. LifeCycle
	1)jspInit()
	2)jspService()
	3)jspDestroy()


*서버측 언어로 사용 할 경우 코드가 노출되지 않음(보안성)

*WEB-INF폴더 : 외부에서 접근할 수 없음


4. 유효성 검사

(1)클라이언트 체크


(2)서버 체크

5. Action Tag
(1) 표준 액션 태그 : <jsp 로 시작하는 태그
	1)<jsp:useBean
	2)<jsp:setProperty
	3)<jsp:getProperty
	4)<jsp:forward
	5)<jsp:include
	6)<jsp:params
	7)<jsp:param
(2) 사용자 정의 태그

6.<jsp:include /> 다른 페이지를 포함시켜라
(1) 페이지 이동 및 복귀
(2) 이동 및 복귀하면서 파라미터 전달 가능
(3) request scope를 주로 이용

7.<jsp:forward/> 페이지이동
(1)시작 페이지의 제어권을 넘겨줌


****페이지 이동기술****
(1) 클리이언트측 이동
	사용자가 직접 이동을 지시
		-HTML 
			<a></a>
			<meta...>
		-JAVASCRIPT
			history
			location
		-JAVA
			response.sendRedirect()

	*다른 웹페이지로 이동이 가능

(2) 서버측 이동
	사용자가 페이지를 이동했다는 사실을 모름
	JAVA기술로만 가능
		- <jsp:include
		- <jsp:forward
		- <@page errorPage=""
		- 
	*다른 웹페이지로 이동이 불가능 같은 프로젝트안에서만 가능

8.BEANS(컴퍼넌트)-jsp랑 소통함        ////////////   서블릿은 html과 소통하고 html을 상속받음
빈을 만들때에는 패키지가 꼭 필요함
(1) <jsp:useBean
	- 인스턴스 생성
	- 이미 인스턴스가 생성되어 있다면 더이상 만들지 않고 그 인스턴스를 참조
	- scope 기본값 page

(2) <jsp:setProperty
	-페이지를 열때마다 호출됨

(3) <jsp:getProperty
	-페이지를 열때마다 호출됨
	-useBean으로 묶어도 강제적으로 반복 호출됨
****Java Bean 규약
***Property 규약
(1) getter메서드의 경우
	-get(소문자)으로 시작한다
	-get다음에 시작되는 첫번째 문자는 대문자로 한다.
	-반드시 리턴 타입이 와야한다.(void는 안된다)
	-반드시 매개변수는 없어야 한다.
(2) setter메서드의 경우
	-set으로 시작한다
	-set다음에 시작되는 첫번째 문자는 대문자로 한다.
	-반드시 리턴타입이 void여야 한다.
	-반드시 매개변수가 있어야 한다.

프레젠테이션 로직 : jsp에 디자인 
비지니스 로직 : bean에 코딩


9.빈의 Property 종류
(1) 참-거짓 프로퍼티
	boolean isValid(){
		...
		return true; // return false
	}

(2)***인덱스 프로퍼티
값을 하나가 아니라 배열이나 컬렉션 같은 여러개의 다중값을 받아옴
액션태그를 사용 할 수 없음...

표준 ActionTag --표준 액션태그 한계--> 사용자 정의 ActionTag ->JSTL
							     ->EL(출력)
		


************************************
//Vector   동기화 처리가 되어 있음//
************************************
 ServletContext getServletContext()  : 현재 프로젝트의 위치



Database
------------------------
1. DBCP(DataBaseConnectionPool)

(1)직접 작성

---------------------------JNDI(Java Naming and Directory Interface) :디렉터리 서비스에서 제공하는 데이터 및 객체를 발견(discover)하고 참고(lookup)하기 위한 자바 API다.
(2)외부 라이브러리 추가
(3)WAS에서 자체 제공

--------------------------------










aaaa























































